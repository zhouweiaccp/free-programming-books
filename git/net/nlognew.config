<?xml version="1.0" encoding="utf-8"?>

 <!--调试时用的--> 
    <!-- <add key="nlog.internalLogLevel" value="Trace"/> -->
    <!-- <add key="nlog.internalLogToConsole" value="true"/> -->
    <!-- <add key="nlog.internalLogToConsoleError" value="true"/> -->
    <!-- <add key="nlog.internalLogToTrace" value="true"/>
     LogManager.Configuration = new XmlLoggingConfiguration(mainConfigFilePath);	-->
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      throwExceptions="true" 
      internalLogLevel="Error"
      internalLogFile="c:\internal-nlog.txt">
 
  <!--<nlog  throwExceptions="true"  xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Trace"
      internalLogFile="E:\Macrowing\EDoc2v4\WindowsService\Logs\nlog.txt">-->
  <!-- the targets to write to https://github.com/NLog/NLog/wiki/File-target -->
  <targets>
    <!-- write logs to file 1M  1048576=1024*1024*1  {windows-identity}-->
   
    <target xsi:type="File" name="EDoc2MailArchiveService" fileName="${basedir}/MailArchiveErrorLog/${date:format=yyyy-MM}/${machinename}_${level}_${shortdate}.log"  archiveAboveSize="1048576"  archiveEvery="Day" autoFlush="true"  maxArchiveFiles="2"  layout="${longdate}   ${message} ${exception}" />
     <target xsi:type="File" name="Conversion" fileName="${basedir}/logs/Conversion/${date:format=yyyy-MM}/${machinename}_Conversion_${shortdate}.log"  archiveAboveSize="5242880"  archiveEvery="Day" autoFlush="true"  maxArchiveFiles="1"  layout="${time}|${message} ${exception}" />
  </targets>
  <!-- rules to map from logger name to target -->

    <rules>
    <!--<logger name="EDoc2.EDoc2Application" minlevel="Debug" maxlevel="Fatal" writeTo="allfileError" />
    <logger name="EDoc2.Services" minlevel="Debug" maxlevel="Fatal" writeTo="EDoc2Services" />
    <logger name="EDoc2.Managers" minlevel="Debug" maxlevel="Fatal" writeTo="EDoc2Managers" />
    <logger name="EDoc2.Document" minlevel="Debug" maxlevel="Fatal" writeTo="EDoc2Document" />-->
    <logger name="EDoc2.MailArchiveService.*" minlevel="Debug" maxlevel="Error" writeTo="EDoc2MailArchiveService" />
    <logger name="EDoc2.Conversion" levels="Debug,Info,Error" writeTo="Conversion" />
    
    <!-- Trace	T	0 -->
    <!-- Debug	D	1 -->
    <!-- Info	I	2 -->
    <!-- Warn	W	3 -->
    <!-- Error	E	4 -->
    <!-- Fatal	F	5 -->
    <!-- Off	O	6 -->
    <!--下面全是demo-->
	    <!--<logger name="ConsoleApplication40.ng.Class1" levels="Info" writeTo="allfilezw" />   指定命名空间-->
    <!--<logger name="*"  level="Trace" writeTo="allfileTrace" />
    <logger name="*"  minlevel="Trace" maxlevel="Fatal" writeTo="allfileTrace" />-->
  
    <!--<logger name="*" level="Debug" writeTo="allfileDebug" />
    <logger name="*"  level="Warn" writeTo="allfileDebug" />
    <logger name="*"  level="Info" writeTo="allfileDebug">
      --><!--<filters>
        --><!--https://github.com/NLog/NLog/wiki/When-Filteraction - Action to be taken when filter matches. Required.
Possible values:
Ignore - The message should not be logged.
IgnoreFinal - The message should not be logged and processing should be finished.
Log - The message should be logged.
LogFinal - The message should be logged and processing should be finished.
Neutral - The filter doesn't want to decide whether to log or discard the message.--><!--
        <when condition="length('${message}') > 200" action="Ignore" />
        <when condition="equals('${logger}','MyApps.SomeClass')" action="Ignore" />
        <when condition="(level >= LogLevel.Debug and contains('${message}','PleaseDontLogThis')) or level==LogLevel.Warn" action="Ignore" />
        <when condition="not starts-with('${message}','PleaseLogThis')" action="Ignore" />
      </filters>--><!--
    </logger>-->
	  
  </rules>
</nlog>

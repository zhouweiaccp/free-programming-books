//按时间查询，排序为正序  ,倒序为.sort({OptTime:-1});
db.LogOperationDataEntity.find({"$and":[{"UserId":2 },{"OptTime":{"$gt":ISODate("2019-11-01T01:16:33.303Z")}},{"OptTime":{"$lt":ISODate("2019-12-05T01:16:33.303Z")}}]},{IP:1,UserRealName:1,OptSourceName:1,_id:0,OptType:1,UserId:1,OptTime:1}).limit(50).sort({OptTime:1});
//字段是否存在
db.doc_1.find({"file_id":{$gt: 0},"is_curVerId" : {$exists:false}})
//范围查询
db.doc_1.find({"file_id":{"$in":[5,4]}})



-----------更新
//字段不存在，添加一个
db.doc_1.update({"file_id":{$gt: 0},"is_curVerId" : {$exists:false}},{$set:{"is_curVerId" : true}})

db.collection_name.find(); 

查询所有的结果： 

select * from users;

db.users.find();

 

指定返回那些列（键）： 

select name, skills from users;

db.users.find({}, {'name' : 1, 'skills' : 1}); 

补充说明： 第一个{} 放where条件 第二个{} 指定那些列显示和不显示 （0表示不显示 1表示显示)

 

where条件： 

1.简单的等于: 

select name, age, skills from users where name = 'hurry'; 

db.users.find({'name' : 'hurry'},{'name' : 1, 'age' : 1, 'skills' : 1});

 

2.使用and 

select name, age, skills from users where name = 'hurry' and age = 18; 

db.users.find({'name' : 'hurry', 'age' : 18},{'name' : 1, 'age' : 1, 'skills' : 1});

 

3.使用or 

select name, age, skills from users where name = 'hurry' or age = 18; 

db.users.find({ '$or' : [{'name' : 'hurry'}, {'age' : 18}] },{'name' : 1, 'age' : 1, 'skills' : 1});

 

4.<, <=, >, >= ($lt, $lte, $gt, $gte ) 

select * from users where age >= 20 and age <= 30; 

db.users.find({'age' : {'$gte' : 20, '$lte' : 30}});

 

5.使用in, not in ($in, $nin) 

select * from users where age in (10, 22, 26); 

db.users.find({'age' : {'$in' : [10, 22, 26]}});

 

6.匹配null 

select * from users where age is null; 

db.users.find({'age' : null);

 

7.like (mongoDB 支持正则表达式) 

select * from users where name like "%hurry%"; 

db.users.find({name:/hurry/}); 

 

select * from users where name like "hurry%"; 

db.users.find({name:/^hurry/}); 

 

8.使用distinct 

select distinct (name) from users; 

db.users.distinct('name');

 

9.使用count 

select count(*) from users; 

db.users.count(); 

 

10.数组查询 （mongoDB自己特有的） 

如果skills是 ['java','python'] 

db.users.find({'skills' : 'java'}); 该语句可以匹配成功 

 

$all 

db.users.find({'skills' : {'$all' : ['java','python']}}) skills中必须同时包含java 和 python 

 

$size 

db.users.find({'skills' : {'$size' : 2}}) 遗憾的是$size不能与$lt等组合使用

 

$slice 

db.users.find({'skills' : {'$slice : [1,1]}}) 

两个参数分别是偏移量和返回的数量

 

11.查询内嵌文档  

12.强大的$where查询

db.foo.find();                   

{ "_id" : ObjectId("4e17ce0ac39f1afe0ba78ce4"), "a" : 1, "b" : 3, "c" : 10 }

{ "_id" : ObjectId("4e17ce13c39f1afe0ba78ce5"), "a" : 1, "b" : 6, "c" : 6 } 

如果要查询 b = c 的文档怎么办？ 

> db.foo.find({"$where":function(){

    for(var current in this){

        for(var other in this){

            if(current != other && this[current] == this[other]){

                return true;    

            }

        }

    }

    return false; 

}}); 

 

{ "_id" : ObjectId("4e17ce13c39f1afe0ba78ce5"), "a" : 1, "b" : 6, "c" : 6 } 

 

1 ) . 大于，小于，大于或等于，小于或等于

$gt:大于

$lt:小于

$gte:大于或等于

$lte:小于或等于

例子：

db.collection.find({ "field" : { $gt: value } } ); // greater than : field > value

db.collection.find({ "field" : { $lt: value } } ); // less than : field < value

db.collection.find({ "field" : { $gte: value } } ); // greater than or equal to : field >= value

db.collection.find({ "field" : { $lte: value } } ); // less than or equal to : field <= value

 

如查询j大于3,小于4: 

db.things.find({j : {$lt: 3}});

db.things.find({j : {$gte: 4}}); 

也可以合并在一条语句内: 

db.collection.find({ "field" : { $gt: value1, $lt: value2 } } ); // value1 < field < value

 

2) 不等于 $ne 
db.things.find( { x : { $ne : 3 } } ); 

3) in 和 not in ($in $nin)
db.collection.find( { "field" : { $in : array } } ); 
db.things.find({j:{$in: [2,4,6]}});
db.things.find({j:{$nin: [2,4,6]}});

 

4) 取模运算$mod

如下面的运算：

db.things.find( "this.a % 10 == 1") 

可用$mod代替：

db.things.find( { a : { $mod : [ 10 , 1 ] } } )

 

5)  $all

$all和$in类似，但是他需要匹配条件内所有的值：

如有一个对象：

{ a: [ 1, 2, 3 ] } 

下面这个条件是可以匹配的： 

db.things.find( { a: { $all: [ 2, 3 ] } } ); 

但是下面这个条件就不行了： 

db.things.find( { a: { $all: [ 2, 3, 4 ] } } );

 

6)  $size
$size是匹配数组内的元素数量的，如有一个对象：{a:["foo"]}，他只有一个元素：

下面的语句就可以匹配：

db.things.find( { a : { $size: 1 } } ); 

官网上说不能用来匹配一个范围内的元素，如果想找$size<5之类的，他们建议创建一个字段来保存元素的数量。 

You cannot use $size to find a range of sizes (for example: arrays with more than 1 element). If you need to query for a range, create an extra size field that you increment when you add elements.

  

7）$exists 
$exists用来判断一个元素是否存在： 

如： 

db.things.find( { a : { $exists : true } } ); // 如果存在元素a,就返回

db.things.find( { a : { $exists : false } } ); // 如果不存在元素a，就返回

分页：
db.collection1.find().skip(0).limit(10);//查询从0条开始，查询10条，skip()方法默认参数为 0 ，表示跳过的条数
排序：
db.collection1.find().sort({age:1});//按照年龄升序排序，为-1的话表示降序排序
存在
db.c2.find({hight:{$exists:1}})；//查询存在hight字段的数据
 
删除：
db.collection1.remove({age:7,name:"xiaomu"});//删除age为7，name为xiaomu的数据
 
更新
db.c3.update({age:12},{name:"xiaoxiao"})；//本意为将age为12的数据中的name更新为xiaoxiao，但是实际效果是只是将age为12的满足条件数据的第一条整条数据覆盖为name：“xiaoxiao”
db.c3.update({age:15},{$set:{name:"xiaolili"}})；//本意为将age为15的数据的name修改为xiaolili，但是实际效果是只修改了查询到的第一条数据
db.c3.update({age:15},{$set:{name:"xiaolili"}},1,1)；//将age为15的数据的name修改为xiaolili
总共4个参数，第四个参数表示有多条数据符合筛选条件的话是否全部更改，默认为0只改第一条，改为1后表示全部更改
第3个参数1表示如果没有符合条件的记录是否新增一条记录，1表示新增，0表示不新增
如：db.c3.update({age:21},{$set:{name:"xiaolili"}},1,1)；//如果不存在age为21的数据则增加一条，增加的数据为{age:12，name:”xiaolili”}
db.c3.update({age:12},{name:"xiaoxiao"},{$inc:{age:-2}},1,1)；//$inc表示使某个键值加减指定的数值，此处表示将name为xiaoxiao的数据的age字段的值减2
db.c3.update({age:12},{name:"xiaoxiao"},{$inc:{age:1}},0,1)；//$unset用来删除某个键，此处表示删除name为xiaoxiao的数据的age字段
 
索引
mongo默认为每条数据的_id字段建索引
db.c3.ensureIndex({age:1});//为age字段建普通索引
db.c3.dropIndex({age:1});//删除age字段的索引
db.c3.ensureIndex({age:1},{unique:true});//为age字段建唯一索引，在为字段建了唯一索引后就不能再添加相同值的记录了
 
数据备份与恢复
备份：mongodump -h dbhost -d dbname -o dbdirectory
-h：mongodb所在服务器地址，如127.0.0.1，当然也可以指定端口号：127.0.0.1:27017
-d：需要备份的数据库实例，如：test
-o：需要备份的数据存放的位置，例如：d:\data (如果没有则自动创建)
恢复：mongorestore -h dbhost -d dbname -directoryperdb dbdirectory
-h：mongodb所在服务器地址，如127.0.0.1，当然也可以指定端口号：127.0.0.1:27017
-d：需要备份的数据库实例，如：test，此名称也可以和备份的时候不一样
-directoryperdb ：备份数据所在的位置，例如：d:\data
注意：恢复时要在退出mongo命令行状态下执行
 
导入与导出
导出：mongoexport -h dbhost -d dbname -c collectionName -o output
-h：数据库地址
-d：指明使用的库
-c：指明要导出的集合
-o：指明要导出的文件路径加文件名，文件名可以是txt、word、excel等多种文件格式
mongoexport.exe -h localhost -d test -c AlerterNewUserLog -o d:\1.json

导入：mongoimport -h dbhost -d dbname -c collectionname 文件的地址路径
-h：数据库地址
-d：指明使用的库
-c：指明要导出的集合
注意：导入时要在退出mongo命令行状态下执行，导入导出与数据备份和恢复相似
 